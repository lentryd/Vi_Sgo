(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d22d746"],{f820:function(e,t,_){"use strict";_.r(t);var r=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},v=[function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("div",{staticClass:"about container"},[_("h4",[e._v("Как работает Vi Sgo?")]),_("p",[e._v(" Здесь будет описана работа самого парсера, а не интерфейса приложения. Для написание сервера я использую "),_("a",{attrs:{href:"//ru.wikipedia.org/wiki/Node.js",target:"_blank"}},[e._v("Node.js,")]),e._v(" а для клиента "),_("a",{attrs:{href:"//ru.wikipedia.org/wiki/Vue.js",target:"_blank"}},[e._v("Vue.js")]),e._v(". Все тесты проводились на сайте "),_("a",{attrs:{href:"//sgo.rso23.ru",target:"_blank"}},[e._v("sgo.rso23.ru")]),e._v(". ")]),_("h5",[e._v("Запросы, SPA и Chrome")]),_("p",[e._v(" С самого начала я планировал использовать HTTP-запросы, но сетевой город — это некое подобие "),_("a",{attrs:{href:"//ru.wikipedia.org/wiki/%D0%9E%D0%B4%D0%BD%D0%BE%D1%81%D1%82%D1%80%D0%B0%D0%BD%D0%B8%D1%87%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5",target:"_blank"}},[e._v("SPA")]),e._v(" и переходы между страницами выполняются при помощи js (поэтому после перезагрузки открывается страница авторизации). Я решил использовать библиотеку "),_("a",{attrs:{href:"//github.com/puppeteer/puppeteer",target:"_blank"}},[e._v("Puppeteer")]),e._v(", которая позволяет управлять браузером (в данном случаи Chrome). И для уменьшения нагрузки на сервер (мой и сетевого) я заблокировал все файлы, которые связаны с оформлением страницы (шрифты, картинки и т.д.) и метрикой (тут это "),_("a",{attrs:{href:"//ru.wikipedia.org/wiki/%D0%AF%D0%BD%D0%B4%D0%B5%D0%BA%D1%81.%D0%9C%D0%B5%D1%82%D1%80%D0%B8%D0%BA%D0%B0",target:"_blank"}},[e._v("Яндекс.Метрика")]),e._v("). ")]),_("h5",[e._v("Авторизация")]),_("p",[e._v(" Прежде чем начать разбираться с данными страниц сетевого нужно пройти авторизацию и тут помимо логина и пароля нужно выбрать город, школу и тип организации. Главная проблема заключается в большом количестве вариантов, и для того, чтобы не заморачиваться с получением этих данных я решил использовать "),_("a",{attrs:{href:"//ru.wikipedia.org/wiki/Cookie",target:"_blank"}},[e._v("cookie")]),e._v(" в котором сохранены все необходимые значения, именно благодаря этим данным сетевой помнит какая школа вам нужна и ускоряет процесс повторной авторизации. ")]),_("h5",[e._v("Взаимодействие")]),_("p",[e._v(" Я нашел три разных способа навигации по сетевому городу и каждый из них по-своему хороши, но использовать я буду третий вариант. ")]),_("h6",[e._v("Навигация при помощи элементов")]),_("p",[e._v(" Для этого нужно находить элементы и вызывать у них событие "),_("i",[e._v("click")]),e._v(" (например "),_("i",[e._v('document.querySelector("a").click()')]),e._v('). Самый большой минус этого способа - это обработка промежуточных страниц, то есть для того чтобы открыть "Журнал об успеваемости" нам нужно сначала нажать на кнопку "Журналы", дождаться загрузки и затем нажать на кнопку "Журнал об успеваемости". ')]),_("h6",[e._v("Навигация при помощи GET запросов")]),_("p",[e._v(" Для этого нам нужно в качестве GET-параметров передать "),_("i",[e._v("at")]),e._v(" и "),_("i",[e._v("ver")]),e._v(". "),_("i",[e._v("at")]),e._v(" мы можем получить из "),_("i",[e._v("appContext.at")]),e._v(", a "),_("i",[e._v("ver")]),e._v(" из "),_("i",[e._v("pageVer")]),e._v(". Тут мы можем пропускать промежуточные страницы и сразу открыть нужную страницу. (Это баг, который работает из-за отсутсвия проверки метода запроса. То есть должно было срабатать при отправки формы (POST), а сработало при обращении (GET)). ")]),_("h6",[e._v("Навигация при помощи формы")]),_("p",[e._v(" В сетевом для удобного перехода между разделами есть форма под названием "),_("i",[e._v("MenuForm")]),e._v(" в которой уже есть значение "),_("i",[e._v("at")]),e._v(" и "),_("i",[e._v("ver")]),e._v(" из метода выше и мне просто остается назначить действие формы и отправить ее (Например "),_("i",[e._v('MenuForm.action = "/angular/school/main/"; MenuForm.submit()')]),e._v("). ")]),_("h5",[e._v("Получение данных")]),_("p",[e._v(" Для получения данных можно либо запарсить элементы на странице, либо перехватить запрос, благо "),_("a",{attrs:{href:"//github.com/puppeteer/puppeteer",target:"_blank"}},[e._v("Puppeteer")]),e._v(" позволяет сделать это. ")])])}],a=_("2877"),i={},D=Object(a["a"])(i,r,v,!1,null,null,null);t["default"]=D.exports}}]);
//# sourceMappingURL=chunk-2d22d746.464b7452.js.map